generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  tasks Task[]
  createdGroups Group[] @relation("GroupCreator")
  groupMembers GroupMember[]
}

model Group {
  id String @id @default(cuid())
  name String 
  code String @unique
  created_at DateTime @default(now())
  creator_id String

  creator User @relation("GroupCreator", fields: [creator_id], references: [id], onDelete: Cascade)
  members GroupMember[]
  tasks Task[]

  @@index([code])
}

model GroupMember {
  id String @id @default(cuid())
  user_id String 
  group_id String 
  joined_at DateTime @default(now())
  role String @default("member")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@unique([user_id, group_id])
}


model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String
  created_at  DateTime @default(now())
  user_id     String
  group_id String?
  
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group Group? @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@index([group_id])
  @@index([user_id])
}